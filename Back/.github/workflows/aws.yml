name: Deploy to AWS EC2 using Docker

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE_NAME: junyoungseo/m2m
  CONTAINER_NAME: m2m-container

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Start SSH Agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Grant execute permission for Gradle Wrapper
      run: chmod +x ./gradlew

    - name: Ensure resources directory exists
      run: mkdir -p ./src/main/resources

    - name: Set up application.properties
      run: |
        echo "spring.application.name=APIServer" >> ./src/main/resources/application.properties
        echo "openai.model=gpt-4o-mini" >> ./src/main/resources/application.properties
        echo "openai.api.key=${{ secrets.OPEN_AI_API_KEY }}" >> ./src/main/resources/application.properties
        echo "openai.api.url=${{ secrets.OPEN_AI_API_URL }}" >> ./src/main/resources/application.properties
        echo "sd.api.key=${{ secrets.SD_API_KEY }}" >> ./src/main/resources/application.properties
        echo "sd.api.url=${{ secrets.SD_API_URL }}" >> ./src/main/resources/application.properties
        echo "ppurio.api.id=${{ secrets.PPURIO_API_ID }}" >> ./src/main/resources/application.properties
        echo "ppurio.api.url=${{ secrets.PPURIO_API_URL }}" >> ./src/main/resources/application.properties
        echo "ppurio.api.key=${{ secrets.PPURIO_API_KEY }}" >> ./src/main/resources/application.properties
        echo "ppurio.api.from=${{ secrets.PPURIO_API_FROM }}" >> ./src/main/resources/application.properties
        echo "cloud.aws.credentials.access-key=${{ secrets.AWS_CREDENTIALS_ACCESS_KEY }}" >> ./src/main/resources/application.properties
        echo "cloud.aws.credentials.secret-key=${{ secrets.AWS_CREDENTIALS_SECRET_KEY }}" >> ./src/main/resources/application.properties
        echo "cloud.aws.s3.bucket=${{ secrets.AWS_BUCKET_NAME }}" >> ./src/main/resources/application.properties
        echo "cloud.aws.region.static=ap-northeast-2" >> ./src/main/resources/application.properties
        echo "cloud.aws.stack.auto=false" >> ./src/main/resources/application.properties
        echo "spring.datasource.url=${{ secrets.DB_URL }}" >> ./src/main/resources/application.properties
        echo "spring.datasource.username=${{ secrets.DB_NAME }}" >> ./src/main/resources/application.properties
        echo "spring.datasource.password=${{ secrets.DB_PASSWORD }}" >> ./src/main/resources/application.properties
        echo "spring.jpa.hibernate.ddl-auto=update" >> ./src/main/resources/application.properties
        echo "spring.jpa.properties.hibernate.format_sql=true" >> ./src/main/resources/application.properties
        echo "spring.jpa.show-sql=true" >> ./src/main/resources/application.properties
        echo "server.error.include-message=never" >> ./src/main/resources/application.properties

    - name: Build with Gradle
      run: ./gradlew build

    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ${{ env.DOCKER_IMAGE_NAME }}:latest

    - name: Login to Docker Hub
      run: echo "${{ secrets.DOCKER_HUB_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin

    - name: Push the Docker image
      run: docker push ${{ env.DOCKER_IMAGE_NAME }}:latest

  deploy-to-ec2:
    needs: build-and-push-docker
    runs-on: ubuntu-latest

    steps:
    - name: Start SSH Agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Deploy to EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        script: |
          # 기존 컨테이너가 있는지 확인하고 삭제
          CONTAINER_ID=$(sudo docker ps -a -q --filter "name=${{ env.CONTAINER_NAME }}")

          if [ ! -z "$CONTAINER_ID" ]; then
            echo "Stopping and removing existing container $CONTAINER_ID"
            sudo docker stop $CONTAINER_ID || true
            sudo docker rm $CONTAINER_ID || true
          fi

          # 최신 이미지로 Docker 컨테이너 실행
          sudo docker pull ${{ env.DOCKER_IMAGE_NAME }}
          sudo docker run --name ${{ env.CONTAINER_NAME }} -d -p 8080:8080 -e TZ=Asia/Seoul ${{ env.DOCKER_IMAGE_NAME }}

          # 실행된 컨테이너 확인
          sudo docker ps
